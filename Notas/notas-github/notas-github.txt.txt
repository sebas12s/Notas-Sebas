inicializar este repositorio con un readme, este es un archivo que se vera en el instante que una persona entre al repositorio en github es una muy buena practica ponerlo con esto 
al crear un nuevo repositorio te muestra esas opciones 
tammbien nos dice si queremos agregar un gitgnore o una licensia 
las licencias son las cuales puedes publicar tu codigo 
row en el archivo te muestra el codigo se podria decir 
blame te muestra quien hizo los cambios     


al principio se le da en code y https y copiamos el link
en git le diremos que agregaremos un origen remoto de nuestros archivos
git remote add origin "la direccion que se copia antes" 
git remote          ya sale origin 
git remote -v       nos sale mas opciones:
fetch       traer cosas
push        enviar cosas 

al hacer el push me tira un error de que en octubre se cambio no se que cosa
para arreglar eso le damos en settings/developer settings/personal access tokens/tokens classic/generat token
selecciono todo y genero el token cuando hacemo el push nos pide el correo y la contrasena en la contrasena ponemos la clave del token y eso ya deja enviar

git push origin master          aqui le estoy diciendo que le envie al origin la rama master
te envia una pantalla para que pongas tu correo y contrasena

git pull origin master          con esto nos trajimos el archivo que teniamos en github
esto nos dice normalmente que no juntara historias para que pase a la fuerza:
git pull origin master --allow-unrelated-histories  


cambia las cosas
git push origin main        esto cambia por master y main 
si solo ejecutamos esto nos tira error      recordar que antes tienes que hacer el remote y el error nos dice que no sabe que paso en el mundo remoto entonces no lo traemos
git pull origin main        con esto lo traemos a nuestro origen se podria decir    
al ejecutar esto nos tira una warning por las historias que no quiere que se unan las 
git pull origin main --allow-unrelated-histories        y ejecutamos esto para fucionar la rama que esta github y la que esta aqui
con esto ultimo traemos los archivos 
git push origin main            esto envia mis archivos a github o los que tenia en main
el main local se envio al main de github 
en blame puedes ver los cambios
y se pueden crear commits mas facies desde github solo lo edito y abajo le das un commit 
pero esto no cambia en el local para que cambie se ejecuta el git pull origin main para traer las cosas 




llaves publicas y llaves privadas
tu puedes enviar la llave publica pero la privada nunca ya que con ella puedes ver los mensjaes
entonces cuando envie un mensaje secreto uso la llave publica de la otra persona para que pueda verla con su llave privada

las llaves ssh no son por repositorio son persona   entonces cada persona tiene una no cada proyecto 
irse al home y ahi crear la llave 
ssh-keygen -t rsa -b        hasta aqui le vamos diciendo que rsa sera el tipo de algoritmo
ssh-keygen -t rsa -b 4096 -C "correo electronico de nosotros"       y asi se crea una llave     esta vez si tienes que poner las comillas dobles   
es recomendado ponerle una contrasena 
donde la guarda, la guarda en user mi usuario y en la carpeta .ssh y son los archivos id_rsa
tenemos que ver que un programa este prendido para que las llaves puedan estar corriendo

despues en donde la guardaste hay dos archivos y el primero es la llave privada la segunda es la llave publica 
despues tenemos que hacer que el sistema operativo reconozca que tenemos una llave
tienes que ver si el sistema ssh esta prendido
eval $(ssh-agent -s)        con esto miramos si esta activo
ssh-add ~/.ssh/id_rsa       al ejecutar este comando estamos agregando la llave privada despues del add va la direccion de donde esta la llave
despues agrego la llave a github en configuraciones esto lo que hace que conecta mi repositorio de github con la llave publica de nuestra computadora

en github en config en ssh le pones el nombre y despues la pegas tu llave publica

ahora en code en nuestro reposritorio ya no le damos en por https ahora en ssh copiamos el link
en la carpeta de nuestro proyecto 

con git remote -v       nos muestra cual es la url de nuestros repositorios
git remote set-url origin git@github.com:sebas12s/hyperblog.git             con origin estamos diciendo que cambiaremos de todos y despues ponemos la url que copiamos antes
en teoria no pasa nada pero ejecutemos el comando donde nos muestras la url y ya

despues podemos cambiar cosas y enviarlas a github pero como es con ssh no nos pide contrasena 

antes de hacer un commit se tiene que hacer un pull traernos la ultima version del repositorio
git pull origin main            en este caso es asi
despues hago el commit normal 
y despues tengo que hacer otra vez el pull para evitar conflictos
git push origin main        asi lo enviamos al repositorio remoto o al repositorio donde todos pueden trabajar



Pull request:
Es una funcionalidad de github (en gitlab llamada merge request y en bitbucket push request), en la que un colaborador pide que revisen sus cambios antes de hacer merge a una rama, normalmente master.

Al hacer un pull request se genera una conversación que pueden seguir los demás usuarios del repositorio, así como autorizar y rechazar los cambios

es buena practica que si hay un error en el main crear un rama para arreglar eso 

despues en github creamos el pull request y coparamos versiones, asi podemos ver si aprobamos los cambios por que digamos que comparamos la rama main con una de prueba y ya miramos
le doy en crear y despues escribimos 
a la derecha podemos asignar a alguien que lo rebice
ya en la otra cuenta podemos revisar el pull request y darle si queremos el commit, tambien podemos ver los commits entonces pueden ser muchos commits  
en los commits te aparece la opcion para devolverlo o aceptarlo en request changes
una vez que hayamos arreglado o cambiado y hacemos el push podemos iniciar una conversacion ahi en el pull 
despues nos pueden aprobar o nosotros podemos aprobar, pero no significa que el merge se haya ejecutado 
entonces al hacer el merge ya se une la rama main y la rama que estabamos probando
y ahi sale para borrar el branch pues como dijimos que era para arreglar algo podemos hacer eso
los pull request no existen del lado de git solo es como una pausa para poder fucionarlo


fork es otra opcion de github para poder modificar sin tener que estar en el proyecto y ya tengo el repositorio 


para clonar un repositorio es solo poner el link que te ponen ahi


fork es para cuando podemos contribuir en un proyecto pero no somos contribuidores hacemos un fork despues lo clonamos nomal 
cuando ya contribuimos y asi y el otro cambio mas cosas no podemos hacer un pull directo o si creo pero en el ejemplo no lo hizo
entonces clonamos otra vez se podria decir y en la consola ponemos
git remote add upstream "el link del clone"     esto lo hacemos cuando contribuimos sin estar de contribuidor ajja
esto nos hace una rama nueva donde podemos traer cosas de la rama master
y de ultimo hacemos un pull del upstream a nuestra rama master/main y ahi nos traemos todos los cambios a nuestra rama 
despues hacemos un push a nuestra rama master/main de nuestro repositorio local entonces ya tenemos los cambios del repositorio remoto en nuestro repositorio local


gitignor        
ignorar archivos, una buena practica es que los binarios no sean parte del repositorio
creamos un archivo ".gitignore" esto es una lita de los archivos que vamos a ignorar
*.jpg       con esto nos va a ignorar todos los archivos jpg 
esto lo hacemos por que es una mala practica guardar archivos binarios en un repositorio 

#   con esto podemos hacer comentarios en gitignore
!/coment/themes         con el not es como decirle si ya ignoramos la carpeta coment con esto es decirle no ignores los themes de coment para eso usamos el not !
en imgur.com        puedes subir imagenes gratis y referenciarlas desde ahi ya que no es buena practica subirlas al repositorio

markdown    es otra buena practica
readme.md       hace como una presentacion de nuestro repositorio
acepta html este archivo
##      con esto tambien editaban
se escribe de diferente manera cuando lo necesite investigare


github pages
es como tener tu proyecto subido en google sin tener que pagar solo con github 
como configurar
en settings/pages       le decimos que nos tome nuestra rama main 
esperamos y ya nos aparece la url   
y ya hasta lo puedo abrir donde sea 
