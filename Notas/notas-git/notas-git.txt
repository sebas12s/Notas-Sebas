    git init: Permite iniciar el repositorio (lugar donde se almacenarán los cambios).

git add <nombre_archivo>: Git comienza a “trackear”, comienza a hacerle un seguimiento archivo en cuestión.

git commit: Envía los últimos cambios del archivo a la base de datos del sistema de control de versiones. Una buena práctica al usar este comando es añadir -m; al hacer esto, podemos escribir un mensaje que nos permita recordar los cambios que hicimos en ese momento.

git add .: Es un comando que nos permite agregar al repositorio todos los archivos a los cuales se le haya hecho algún cambio.

git status: Permite ver el estado de la base de datos. Por ejemplo, podemos ver si hay algunos cambios que no se han guardado en el repositorio, y si no hay nada nos dirá que todo esta bien.

git show: Mostrara todos los cambios que hemos hecho, esto incluye las líneas que hemos cambiado, cuando y quien hizo dicho cambios.

git log <nombre_archivo>: Muestra todo el historial del archivo.

git push: Permite enviar los cambios realizados a un servidor remoto.

git push origin <nombre_rama>: Sube la rama “nombre_rama” al servidor remoto.

git fetch: Descarga los cambios realizados en el repositorio remoto.

git merge <nombre_rama>: Impacta en la rama en la que te encuentras parado, los cambios realizados en la rama “nombre_rama”.

git pull: Unifica los comandos fetch y merge en un único comando.

git checkout -b <nombre_rama_nueva>: Crea una rama a partir de la que te encuentres parado con el nombre “nombre_rama_nueva”, y luego salta sobre la rama nueva, por lo que quedas parado en esta última.

git checkout -t origin/<nombre_rama>: Si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre.

git branch: Lista todas las ramas locales.

git branch -a:Lista todas las ramas locales y remotas.

git branch -d <nombre_rama>: Elimina la rama local con el nombre “nombre_rama”.

git push origin <nombre_rama>: Commitea los cambios desde el branch local origin al branch “nombre_rama”.

git remote prune origin: Actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota.

git reset --hard HEAD: Elimina los cambios realizados que aún no se hayan hecho commit.

git revert <hash_commit>: Revierte el commit realizado, identificado por el “hash_commit”.

**
Repository: Donde se almacena todo el proyecto, el cual puede vivir tanto en local como en remoto. El repositorio guarda un historial de versiones y, más importante, de la relación de cada versión con la anterior para que pueda hacerse el árbol de versiones con las diferentes ramas.

Fork: Si en algún momento queremos contribuir al proyecto de otra persona, o si queremos utilizar el proyecto de otro como el punto de partida del nuestro. Esto se conoce como “fork”.

Clone: Una vez se decide hacer un fork , hasta ese momento sólo existe en GitHub. Para poder trabajar en el proyecto, toca clonar el repositorio elegido al computador personal.

Branch: Es una bifurcación del proyecto que se está realizando para anexar una nueva funcionalidad o corregir un bug.

Master: Rama donde se almacena la última versión estable del proyecto que se está realizando. La rama master es la que está en producción en cada momento (o casi) y debería estar libre de bugs. Así, si esta rama está en producción, sirve como referente para hacer nuevas funcionalidades y/o arreglar bugs de última hora.

Commit: consiste en subir cosas a la versión local del repositorio. De esta manera se puede trabajar en la rama de forma local sin tener que modificar ninguna versión en remoto ni tener que tener la última versión remota, cosa muy útil en grandes desarrollos trabajados por varias personas.

Push: Consiste en enviar todo lo que se ha confirmado con un commit al repositorio remoto. Aquí es donde se une nuestro trabajo con el de los demás.

Checkout: Acción de descargarse una rama del repositorio GIT local (sí, GIT tiene su propio repositorio en local para poder ir haciendo commits) o remoto.

Fetch: Actualiza el repositorio local bajando datos del repositorio remoto al repositorio local sin actualizarlo, es decir, se guarda una copia del repositorio remoto en el local.

Merge: La acción de merge es la continuación natural del fetch. El merge permite unir la copia del repositorio remoto con tu repositorio local, mezclando los diferentes códigos.

Pull: Consiste en la unión del fetch y del merge, esto es, recoge la información del repositorio remoto y luego mezcla el trabajo en local con esta.

Diff: Se utiliza para mostrar los cambios entre dos versiones del mismo archivo.

Bug: Error


- solo uno significa que usaras una letra 
-- significa que usaras una palabra



git commit -m "mensaje para saber que hiciste"      esto envia los cambios solo con el commit es suficiente pero es una mala practica no dejarle un mensaje
si cambiamos algo pues solo hacemos otro commit con otro mensaje
pero siempre lo tenemos que agregar antes de hacer el commit
git add .       esto agrega todos los archivos que tengamos en esa carpeta
git log "nombre del archivo"        esto muestra todos los cambios 
git log --stat          esto muestra mas detalladamente los cambios
git log --all           te muestra mas cosas
git log --all --graph       te muestra como unas flechitas como el git mejorado
git log --all --graph --decorate --oneline      esto te muestra todo mas comprimido y mas bonito
git log --oneline       esto muestra solo los commits
ahi se muestra unos numeros donde dice commit: esos numeros son como el nombre de esa modificacion 
tambien dice head y master es como decir es la version mas reciente
git show "nombre del archivo"   esto te muestra los cambios que se hicieron
para ver los cambios de una o de otra ejecutamos
git diff y los dos numeros que aparece con git log asi podemos comparar diferentes versiones, pone al principio la version mas vieja
git diff        nos mestra lo que se cambio


alias 
cuando son muy grandes podemos hacer alias como vimos en linux haremos uno con el que muestra todo bonito
alias "el nombre del alias"="git log --all --graph --decorate --oneline"    entre parentesis el comando


hablemos de las ramas
primera rama sabemos que se llama master aunque vi un comentario que se llamaba main 
la segunda rama es la experimental pero se le llama mas development
si la rama actual la ultimma version muestra un bug un ejemplo, se le puede hacer otra rama eso le dicen hotfix
despues lo arreglamos y lo enviamos a la ultima version eso se le conoce como un merge
esa seria la version final la version head

git reset "clave de la version" --hard      reset nos permite regresar, con hard todo!! vuelvo al estado que le estemos diciendo
git reset "clave de la version" --soft      esto igual vuelve a la version anterior pero todavia guarda lo que tengamos en staging eso no se borra 
mucho cuidado por que es una forma de volver al pasado de una forma muy agresiva

cuando tengamos cambios en el directorio y hayanmos guardado algo en staging podemos hacer
git diff        y esto muestra lo que esta diferente y ya despues si queremos podemos hacer el git add .    
pero recordad que si solo le damos al git add solo se guarda en staging para llevarlo al repositorio se hace el commit 

git checkout "la clave de la version" "el archivo que queremos que nos devuelva"    esto nos muestra en el archivo como era podemos ver como era en la primera version
git checkout master "el archivo que queremos que nos devuelva"      con solo poner master nos muestra la ultima version
git checkout        esta es una manera de volver a versiones anteriores, igual tener mucho cuidado
si queremos cambiar algo solo cambiamos y le volvemos a dar git add y commit y ya pero arrancando de una version mas antigua

entonces se puede usar el git reset de forma ruda o el checkout que todavia los guarda

git rm --cached         este comando permite borrar archivos este borra del staging y del directorio local pero los deja en el disco duro
git rm --force          borra en todos lados se puede recuperar pero se usan comandos mas avanzados
git reset HEAD          este nos ayuda para sacar los archivos del staging para editarlos y asi y despues volverlos enviar pero no borra nada

trabajo remoto con git
git clone url_del_servidor_remoto        nos trae una copia master a nuestro directorio y todos los cambios al repositorio local esto lo trae del repositorio remoto
git push            ejecutamos esto despues de hacer add y commit entonces cuando ejecutemos enviamos la ultima version del repositorio local al repositorio remoto
git fetch           esto trae del repositorio remoto las actualizaciones a nuestro repositorio local trae todos los cambios
git merge           como solo el fetch no te lo copia en tus archivos entonces tienes que hacer este comando para que te lo copie y puedas trabaajar en el
git pull            este fuciona ambos conceptos entonces trae los cambios a nuestro repositorio local y despues lo copia a nuestros archivos            

git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.

ramas en git 
master rama principal
head cabecera la cabeza
cuando creamos una rama agarra el ultimo commit y ya podemos cambiar y eso no lo ve la rama master hasta que lo volvamos a fucionar
git commit -am "mensaje"     este tambien hace el git commit pero solo con archivos que antes se le habian hecho add antes 
git commit -a           si solo lo dejamos asi nos manda a editor de texto para que podamos ahi escribir el texto
esto como que no tienes que hacer el add antes
git show        esto muestra los cambios y con esto podemos ver donde esta el head en este caso esta en el master
las ramas se crean donde estan 
git branch "el nombre"       con esto podemos crear una rama 
git checkout "el nombre de la rama"         asi podemos cambiar a la otra rama para trabajar en ella  con git status podemos ver en que cabecera es en la que estamos
despues de hacer los cambios si cambiamos de rama tambien cambia mi archivo
head es un indicador de cual version estamos viendo en nuestra computadora por eso puede cambiar las head 
git checkout -b "nombre_rama" es una union de los dos git con branch
recordar si no haces un add y un commit y te pasas a otra rama pierdes todo lo que habias cambiado
git show-branch         esto muestra el history de las brach y cual era
git show-branch --all       esto muestra algo similiar pero con mas datos
git branch --all    asi podemos ver las ramas del repostorio y el repositorio remoto
gitk        te habre visualmente las ramas
entonces para enviarle las demas branchs solo hacemos lo siguiente
git push origin "el nombre de la rama"
entonces puedes enviar las ramas al repositorio remoto o solo en tu computador mantenerlas
git branch -M main  esto mueve todos los cambios de la rama actual a la rama que estamos poniendo       pero esto borra la rama actual no lo hagan

para borrar una rama en el ropositorio remoto se hace de la siguiente manera
git push "repositorio remoto" --delete "el nombre de la rama"
git push origin --delete master     asi seria un ejemplo
git branch -d "el nombre del branch"        asi se borra la branch del local

para unir una rama con el master se hace el marge pero si tiene que hacer en el master o si no el master o la rama principal se cambia 
git merge "el nombre de la rama que quermos unir"         esto nos une la ultima version de la rama y la de master y nos crea una nueva version 
git branch          esto te muestra las ramas 
recordar que marge es como un commit entonces tiene que llevar un mensaje
git merge se puede hacer en cualquier rama para traer las ultimas versiones del trabajo

si te sale conflicto solo lo arreglas o decides con cual quedarte y despues ya haces el commit y ya quedan los cambios

para salir del editor de codigo de git le da uno esc despues :x! y preciona enter 
hay unos conflictos entre master y main le cambiaron el nombre a main


trabajando con mas persona 
cree un nuevo usuario entonces clone el repositorio donde lo queria copiar al copiarlo no me pidio contrasena por que es un repositorio publicoo 
al intentar subir con push nos pide el usuario y la contrasena pero nos tirara error si no agregamos ese usuario en el repositorio remoto
para agregarlo tenemos que ir a los settings del repositorio en collaborators ahi puedo agregar a otros colaboradores
y ya en su github le aparece la invitacion
a la rama main solo se envia lo que este seguro para trabajar solo eso
los archivos binarios no se tienen que enviar al repositorio en este caso una imagen eso se trabaja por aparte 
al trabajar con binarios se pueden tardar por no se que cosa xd


normalmente la rama main no se puede tocar por que esa sera la version que se subira al servidor o esa es la version final a produccion
para poder trabajar sin tener que tocar el main y poder hacer pruebas y todo eso a ese tipo de servidores se le conoce servidores de staging o de desarrollo
esta branch justo esta antes que master pero ese servidor se le llama servidor de prubas
entonces nosotros no lo enviamos al main lo enviamos al servidor de pruba pero no lo unimos con marge hacemos un pull request que es un estado intermedio antes de enviar el merge
el pull request lo que hace es que otros puedan ver los cambios que ejecutastes y si les gusta hacen el merge
pull request no es de git es de github por que github es el que me permite trabajar con otros git solo controla las versiones de mi trabajo
tambien esta en bitbucket pero se llama push request
y los que hacen todo esto son los lideres de equipo o un perfil muy especial que se les llama DevOps



tag         
son como cuando un juego tiene versiones como 1.18.1 1.18.20 y asi
git tag -a v0.1     el nombre puede ser el que quieras  pero es normal ponerle ese nombre       el nombre va despues de la -a
git tag -a v0.1 -m "" "el hash o el id de la rama pasada"      se le agrega un mensaje tambien      y ya ultimo el id de esa versio 
git tag         si solo ponemos asi podemos ver los tags que tenemos
git show-ref --tags         pero asi muestra donde esta ese tag 
pero el que me muestra ese id me muestra otro diferente al que puse al comienzo
los tags son utiles en github o en sitios abiertos para que los que entren puedan ver que version es y asi
o pueden servir como un cometario para saber donde me quede o algo asi
entonces enviamos o hacemos un push     me tira error cuando lo corro por ubuntu asi que mejor hacerlo en git bash
despues del pull ponemos el siguiente codigo
git push origin --tags      esto dice que vamos a enpujarle nuestros tags
git tag -d "el nombre del tag"      asi se borra un tag 
aunque lo borre en git no se borro en github 
git push origin :refs/tags/dormido      esta es una forma de borrar los tags en ese repositorio donde no se borro



rebase - mala practica es como agarrar una rama y pegarla a tu rama maestra y hacer que nunca se creo
es como si nunca hubiera existido 
em el ejemplo en una rama hicimos experimentos y queremos traer todo eso a la rama main 
dentro de la rama de experimentos ejecutamos
git rebase "la rama main"
primero se le hace rebase a la rama que vamos a eliminar y despues a la rama principal
como el primer rebase se lo hacemos a main esos commits aparecen primero despues aparecen los commits del segundo que le hagamos rebase
primero a la rama que cambia y despues rebase a la rama principal
git checkout -      cambia a la rama anterior en la que estabas
git branch -D "rama"        esto lo eliminado

stashed 
es como guardar unos cambios en alguna parte y volver al ultimo commit es como que esos cambios nunca hubieran pasado pero estan ahi guardados
hice unos cambios pero no les quiero dar commit y necesito regresar una commit anterior entonces le doy 
git stash       esto me regresa al ultimo commit 
git stash list      esto nos muestra el stash echo      el stach como que guarda esos cambios en algun lugar
git stash pop       esto vuelve a lo que teniamos en el stash
git stash branch "nombre de la rama"        y esto envia el stash a otra rama o la crea si no existe la rama
git stash drop          con esto eliminamos el stash


git clean
git clean solo sirve para archivos que estan pendientes a darles add
nos sirve para borrar archivos que sirven en este ejemplo hice unas copias del los archivos
git clean --dry-run         este comando nos sirve para que nos muestre que archivos nos borrara sin borrarlos
git clean -f        y ya este nos borra esos archivos       pero solo archivos no carpetas      tambien ignora todo lo que esta en gitignore    
git clean -q        nos muestra los errores que tuvo la ejecucion pero no los archivos que fueron borrados 
git clean -x        borra las copias incluso las que estan en gitignore
git clean -X        borra archivos que fueron ignorados por git
git clean -f -d         tambien borra directorios


git cherry-pick     
esto nos ayuda a traernos un commit de cualquier version a la rama que queramos sin tener que hacer el merge 
git cherry-pick "el id del commit"              esto se hace desde la rama que queremos ingresarlo  y ya nos trae el commit 
ya despues se puede hacer el merge  
git merge "la rama que queremos traer"          pero nos dara conflicto ya que antes habiamos traido el commit
ya solo resolvemos el conflicto en este caso solo le di aceptar ambos commits
despues de resolver el conflicto debemos de hacer el merge es como darle nombre al otro commit ya con los cambios hechos


git reflog      
esto nos ayuda por si hicimos algo muyy malo entonces queremos volver 
git reflog      nos muestra todo los cambios y lo que eliminamos y asi
ahi copiamos el head donde todo era correcto 
git reset "el head que copiamos"        esto como que nos trae todos los o lo que borramos en este caso pero solo aparece en rojo cuando le damos git status
es como si solo le hubieramos borrado pero no le hubieramos dado ni el add ni el commit 
entonces para traernoslo bien bien hacemos el
git reset --hard "el id del commit"         y ya con esto traemos bien todo
con esto volvemos y no aparece nada pero si ejecutamos el git reflog ahi se guardo los erroes


cuando envias commits y te faltaba algo mas 
se hace el add no de una vez el commit -am      entonces si nos falto el cambio y ya habiamos hecho el commit solo lo cambiamos y le damos 
git add .
git commi --amend           esto lo que hace es que todos los cambios que hice los pega al commit anterior 
despues ya solo nos pide si quermos cambiar el mensaje y ya esta hecho


para buscar alguna palabra en algo usamos
git grep "la palabra"       esto nos muestra donde aparece esa palabra
git grep -n "la palabra"        nos aparece en que linea 
git grep -c "la palabra"        esto nos muestra la cantidad de veces en la que aparece
git log -S "la palabra"         esto si va entre comillas       y esto busca en todos los commits la palabra



alias muy buenos
git shortlog            esto nos muestra como un log por persona los commit que han hecho cada uno de los miembros del equipo
git shortlog -sn        esto solo nos muestra cuantos han hecho la cantidad
git shortlog -sn --all          esto incluso los borrados
git shortlog -sn --all --no-merges          con esto le decimos que no nos incluya los merges       asi solo miramos los commits
para crear el alias se hace de la siguiente manera
git config --global alias."el nombre del alias" "el pedazo del comando"     este si va entre comillas
git config --global alias.stats "shortlog -sn --all --no-merges"        este es el alias que creamos

git blame -c "el nombre del archivo que queremos ver"       esto nos ayuda para ver que y quien hizo cada cosa
git blame "nombre del archivo o direccion" -L33,50 -c           los numeros son las lineas de cual a cual queremos ver los cambios y la c es para ordenar un poco

git branch -r       esto muestra las ramas remotas
git branch -a       esto muestra todas


git resotore .      vuelve a todo sin los cambios 



para configuracion
git config         esto muestra todas las configuraciones que se le puede dar 
git config --list       este comando te muetra la configuracion por defecto de tu git
git config --list --show-origin         esto te muestra donde esta guardado los cambios

para cambiar el usuario y el email se usa lo siguiente
git config --global user.name "tu usuario"
git config --global user.email "tu email"


comandos que sirven para trabajos muy grandesgit log --oneline:Te muestra el id commit y el título del commit.
git log --decorate: Te muestra donde se encuentra el head point en el log.
git log --stat: Explica el número de líneas que se cambiaron brevemente.
git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
git log -3: Limitamos el número de commits.
git log --after=“2018-1-2”
git log --after=“today” y
git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html: Busca los commits en un archivo en específico.
git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
git log > log.txt: guardar los logs en un archivo txt
