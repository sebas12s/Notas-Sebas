
git checkout -t origin/<nombre_rama>: Si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre.


git remote prune origin: Actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota.

git revert <hash_commit>: Revierte el commit realizado, identificado por el “hash_commit”.

 pull request que es un estado intermedio antes de enviar el merge
el pull request lo que hace es que otros puedan ver los cambios que ejecutastes y si les gusta hacen el merge
pull request no es de git es de github por que github es el que me permite trabajar con otros git solo controla las versiones de mi trabajo


git clean
git clean solo sirve para archivos que estan pendientes a darles add
nos sirve para borrar archivos que sirven en este ejemplo hice unas copias del los archivos
git clean --dry-run         este comando nos sirve para que nos muestre que archivos nos borrara sin borrarlos
git clean -f        y ya este nos borra esos archivos       pero solo archivos no carpetas      tambien ignora todo lo que esta en gitignore    
git clean -q        nos muestra los errores que tuvo la ejecucion pero no los archivos que fueron borrados 
git clean -x        borra las copias incluso las que estan en gitignore
git clean -X        borra archivos que fueron ignorados por git
git clean -f -d         tambien borra directorios


git cherry-pick     
esto nos ayuda a traernos un commit de cualquier version a la rama que queramos sin tener que hacer el merge 
git cherry-pick "el id del commit"              esto se hace desde la rama que queremos ingresarlo  y ya nos trae el commit 
ya despues se puede hacer el merge  
git merge "la rama que queremos traer"          pero nos dara conflicto ya que antes habiamos traido el commit
ya solo resolvemos el conflicto en este caso solo le di aceptar ambos commits
despues de resolver el conflicto debemos de hacer el merge es como darle nombre al otro commit ya con los cambios hechos


git reflog      
esto nos ayuda por si hicimos algo muyy malo entonces queremos volver 
git reflog      nos muestra todo los cambios y lo que eliminamos y asi
ahi copiamos el head donde todo era correcto 
git reset "el head que copiamos"        esto como que nos trae todos los o lo que borramos en este caso pero solo aparece en rojo cuando le damos git status
es como si solo le hubieramos borrado pero no le hubieramos dado ni el add ni el commit 
entonces para traernoslo bien bien hacemos el
git reset --hard "el id del commit"         y ya con esto traemos bien todo
con esto volvemos y no aparece nada pero si ejecutamos el git reflog ahi se guardo los erroes


cuando envias commits y te faltaba algo mas 
se hace el add no de una vez el commit -am      entonces si nos falto el cambio y ya habiamos hecho el commit solo lo cambiamos y le damos 
git add .
git commi --amend           esto lo que hace es que todos los cambios que hice los pega al commit anterior 
despues ya solo nos pide si quermos cambiar el mensaje y ya esta hecho


para buscar alguna palabra en algo usamos
git grep "la palabra"       esto nos muestra donde aparece esa palabra
git grep -n "la palabra"        nos aparece en que linea 
git grep -c "la palabra"        esto nos muestra la cantidad de veces en la que aparece
git log -S "la palabra"         esto si va entre comillas       y esto busca en todos los commits la palabra



alias muy buenos
git shortlog            esto nos muestra como un log por persona los commit que han hecho cada uno de los miembros del equipo
git shortlog -sn        esto solo nos muestra cuantos han hecho la cantidad
git shortlog -sn --all          esto incluso los borrados
git shortlog -sn --all --no-merges          con esto le decimos que no nos incluya los merges       asi solo miramos los commits
para crear el alias se hace de la siguiente manera
git config --global alias."el nombre del alias" "el pedazo del comando"     este si va entre comillas
git config --global alias.stats "shortlog -sn --all --no-merges"        este es el alias que creamos

git blame -c "el nombre del archivo que queremos ver"       esto nos ayuda para ver que y quien hizo cada cosa
git blame "nombre del archivo o direccion" -L33,50 -c           los numeros son las lineas de cual a cual queremos ver los cambios y la c es para ordenar un poco


git resotore .      vuelve a todo sin los cambios 



